syntax = "proto2";

option optimize_for = SPEED;

import "osi_common.proto";
import "osi_version.proto";

package osi3;

//
// \brief Interface consisting of trajectory information.
// This information is passed on to actuator management for controlling the traffic participant for e.g. vehicles
//
// All coordinates and orientations are relative to the global coordinate system.
//

message DriverOutput
{
    //*****to be discussed further*****
    // The intention of AD function to actuator management
    //
	
	
	// Define different options for driver ouput. Each option must be represented by varbiable in the message.
	//
	enum OutputOptions {
		DESIRED_STATE = 0;
		TRAJECTORY = 1;
	
	}
    
	// Define the option tha is used.
	// This must be set. Additionaly the corresponding variable must be filled.
	//
    optional OutputOptions option = 0;
	
	optional DesiredState desired_state = 1;
	
	optional Trajectory trajectory = 2;
}

// Defines a message containing a trajecory.
// ToDo: Unfiy this with other workpackages.
//
message Trajectory {
	repeated TrajectoryPoint trajectory_point = 0;
}

//
// Note: This is identical to the state point in 
// https://github.com/OpenSimulationInterface/open-simulation-interface/blob/feature/osi-traffic-participants-combined/osi_trafficcommand.proto
// ToDo: Create a unifies understanding of a trajectory 
//
// \brief The StatePoint definition
//
// \note The StatePoint definition does not define mandatory fields.
// The context defines how and what fields are used.
// For example: FollowPathAction does not use timestamp in contrast to
// FollowTrajectoryAction. 
//
message TrajectoryPoint
{
    // The timestamp of a StatePoint
    //
    // \note Zero time point does not need to coincide with the UNIX epoch.
    //
    optional Timestamp timestamp = 1;

    // Position in the global coordinate system.
    //
    // The position refers to the center (x,y,z) of the bounding box.
    //
    // \note Remark: The definition of the reference point follows the
    // specification of the \c BaseMoving message.
    //
    optional Vector3d position = 2;

    // Orientation in the global coordinate system.
    //
    optional Orientation3d orientation = 3;
}


message DesiredState
{  
    //*****to be discussed further*****
    // intended position to be reached in x-direction.
    //
    optional double desired_x_pos = 1;
    
    // intended position to be reached in y-direction.
    //
    optional double desired_y_pos = 2;
    
    // intended heading to be reached.
    //
    optional double desired_heading = 3;
    
    // intended velocity to be reached. Assuming in X-Direction. tbd: Y-Direction is to considered?
    //
    optional double desired_velocity = 4;
    
    // intended acceleration to be reached. Assuming in X-Direction. tbd: Y-Direction is to considered?
    //
    optional double desired_acceleration = 5;

}
