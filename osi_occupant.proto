syntax = "proto2";

option optimize_for = SPEED;

import "osi_common.proto";

package osi3;

//
// \brief An occupant of a host vehicle, especially the driver of the vehicle.
//
message Occupant
{
    // The ID of the driver.
    //
    // \rules
    // is_globally_unique
    // \endrules
    //
    optional Identifier id = 1;

    // Specific information about the classification of the occupant.
    //
    optional Classification classification = 2;

    //
    // \brief Information regarding the classification of the occupant.
    //
    message Classification
    {
        // Flag determining whether the person is the driver of the vehicle or a
        // passenger.
        //
        optional bool is_driver = 2;

        // Seat position of the vehicle occupant.
        //
        optional Seat seat = 3;

        // Describes the state of the passenger's hands related to the steering
        // wheel (mostly driver).
        //
        optional SteeringControl steering_control = 4;
        
        // Occupant's (physiological) state.
        //
        optional State state = 5;

        // Definition of seat positions.
        //
        enum Seat
        {
            // Seat position is unknown (must not be used in ground truth).
            //
            SEAT_UNKNOWN = 0;

            // Other (unspecified but known) seat.
            //
            SEAT_OTHER = 1;

            // Seat position is in the front row, left seat.
            // This is usually the driver's seat in right-hand traffic.
            //
            SEAT_FRONT_LEFT = 2;

            // Seat position is in the front row, right seat.
            // This is usually the driver's seat in left-hand traffic.
            //
            SEAT_FRONT_RIGHT = 3;

            // Seat position is in the front row, middle seat.
            //
            SEAT_FRONT_MIDDLE = 4;

            // Seat position is in the back row, left seat.
            //
            SEAT_BACK_LEFT = 5;

            // Seat position is in the back row, right seat.
            //
            SEAT_BACK_RIGHT = 6;

            // Seat position is in the back row, middle seat.
            //
            SEAT_BACK_MIDDLE = 7;

            // Seat position is in the third row, left seat.
            //
            SEAT_THIRD_ROW_LEFT = 8;

            // Seat position is in the third row, right seat.
            //
            SEAT_THIRD_ROW_RIGHT = 9;

            // Seat position is in the third row, middle seat.
            //
            SEAT_THIRD_ROW_MIDDLE = 10;
        }

        // Definition of hands related to the steering wheel (mostly driver).
        //
        enum SteeringControl
        {
            // Hands state is unknown (must not be used in ground truth).
            //
            STEERING_CONTROL_UNKNOWN = 0;

            // Other (unspecified but known) hand positioning related to the
            // steering wheel.
            //
            STEERING_CONTROL_OTHER = 1;

            // Hands are not on the steering wheel.
            //
            STEERING_CONTROL_NO_HAND = 2;

            // One hand is on the steering wheel. Whether it is the left or
            // right hand is unspecified or unknown.
            //
            // \note If there is no differentiation between one or both hands on
            // the steering wheel, this value should be used.
            //
            STEERING_CONTROL_ONE_HAND = 3;

            // Both hands are on the steering wheel.
            //
            STEERING_CONTROL_BOTH_HANDS = 4;

            // Only left hand is on the steering wheel.
            //
            STEERING_CONTROL_LEFT_HAND = 5;

            // Only right hand is on the steering wheel.
            //
            STEERING_CONTROL_RIGHT_HAND = 6;
        }
        
        //
        // \brief An occupant's state consists of physiological data like head pose,
        // eye states and gaze.
        //
        message State
        {
            // The position from the occupant's head, always relative to the host vehicle frame
            // (for ground truth occupants an detected occupants).
            //
            optional Vector3d head_position = 1; 
 
            // The orientation from the occupant's head, always relative to the host vehicle frame
            // (for ground truth occupants an detected occupants).

            // The head pose describes the occupant's head orientation.
            // The x-axis of the right-handed head frame is pointing along the
            // occupant's straight ahead viewing direction (anterior), the y-axis lateral to the left,
            // and the z-axis is pointing upwards (superior) [1].
            //
            // ``View_normal_base_coord_system =
            // Inverse_Rotation(#head_pose)*Unit_vector_x``
            //
            // \par Reference:
            //
            // [1] Patton, K. T. & Thibodeau, G. A. (2015). <em>Anatomy & Physiology</em>. 9th Edition. Elsevier. Missouri, U.S.A. ISBN 978-0-323-34139-4. p. 1229.
            //
            optional Orientation3d head_pose = 2;
            
            // Left eye state.
            //
            optional EyeState eye_state_left = 3;
            
            // Right eye state.
            //
            optional EyeState eye_state_right = 4;
            
            //
            // \brief The eye state comprises information regarding an eye's presence, gaze,
            // position and opening.
            //
            message EyeState
            {
                // Flag indicating whether the eye is present.
                //
                optional bool present = 1;
                
                // Gaze vector, relative to the occupant's head pose.
                //
                optional Orientation3d gaze = 2;
                
                // Position of the eye relative to the occupant's head position.
                //
                optional Vector3d position = 3;
                
                // Opening of the eye.
                //
                // Unit: [m]
                //
                optional double opening = 4;
            }
        }
    }
}
